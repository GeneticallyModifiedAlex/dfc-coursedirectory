@using Dfc.CourseDirectory.Common.Settings
@using Dfc.CourseDirectory.Models.Models.Courses
@using Microsoft.Extensions.Options
@model Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate.AddStartDateModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@*<div class="govuk-form-group">
        <div class="govuk-character-count" data-module="character-count" data-maxlength=@courseForComponentSettings.Value.TextFieldMaxChars>
            <div class="govuk-form-group" style="margin-bottom: 0;padding-bottom: 0">
                <label class="govuk-label" for="course-for">
                    @Model.LabelText
                </label>
                <span id="course-for-hint" class="govuk-hint">
                    @Model.HintText
                </span>
                <span asp-validation-for="@Model.CourseFor" class="govuk-error-message"></span>
                <textarea asp-for="@Model.CourseFor" class="govuk-textarea js-character-count" rows="5"  type="text" aria-describedby="@Model.AriaDescribedBy"></textarea>
            </div>
        </div>
    </div>*@



<fieldset class="govuk-fieldset" aria-describedby="changed-name-hint">

    <div class="govuk-form-group" id="date">
        <label class="govuk-label" for="sub" style="margin-bottom: 15px">
            Start date
        </label>
        <span id="more-detail-hint" class="govuk-hint">Enter the start date of this course, if it has flexible start dates select the checkbox below </span>
        @*<div class="govuk-radios govuk-radios--inline" style="margin-bottom:30px;">
                <div class="govuk-radios__item ">
                    <input class="govuk-radios__input classroom govuuk-colour" name="changed-name2" type="radio" value="classroom" checked="" style="background: rgb(255, 255, 255);">
                    <label class="govuk-label govuk-radios__label" for="changed-name-1">

                    </label>
                </div>
            </div>*@

        <div class="govuk-radios__item">
            @Html.RadioButtonFor(m => m.StartDateType, StartDateType.Specified, new { @class = "govuk-radios__input specified" })
            <label class="govuk-label govuk-radios__label" for="@StartDateType.Specified">@StartDateType.Specified</label>
        </div>

        <div class="govuk-form-group">
            <span asp-validation-for="@Model.Day" class="govuk-error-message"></span>
            <span asp-validation-for="@Model.Month" class="govuk-error-message"></span>
            <span asp-validation-for="@Model.Year" class="govuk-error-message"></span>
            <div class="dateFields">
                <label class="govuk-label" asp-for="@Model.Day" aria-describedby="@Model.DayAriaDescribedBy" style="display: inline-block; width: 60px;">
                    @Model.DayLabelText
                </label>
                <label class="govuk-label" asp-for="@Model.Month" aria-describedby="@Model.MonthAriaDescribedBy" style="display: inline-block; width: 60px;">
                    @Model.MonthLabelText
                </label>
                <label class="govuk-label" asp-for="@Model.Year" aria-describedby="@Model.YearAriaDescribedBy" style="display: inline-block; width: 120px;">
                    @Model.YearLabelText
                </label>
            </div>

            <input class="govuk-input" asp-for="@Model.Day" type="text" style="width: 60px;">
            <input class="govuk-input" asp-for="@Model.Month" type="text" style="width: 60px;">
            <input class="govuk-input" asp-for="@Model.Year" type="text" style="width: 120px;">
        </div>




        <span id="more-detail-hint" class="govuk-hint" style="margin-top: 20px">Or select a flexible start date: </span>

        <div class="govuk-radios__item">
            @Html.RadioButtonFor(m => m.StartDateType, StartDateType.Flexible, new { @class = "govuk-radios__input flexible" })
            <label class="govuk-label govuk-radios__label" for="@StartDateType.Flexible">@StartDateType.Flexible</label>
        </div>


        @*<div class="govuk-radios__item">
                <input class="govuk-radios__input classroom govuuk-colour" name="changed-name2" type="radio" value="classroom" style="background: rgb(43, 140, 196);">
                <label class="govuk-label govuk-radios__label" for="changed-name-1">
                    Select a flexible start date

                </label>
            </div>*@



        <!--<div class="govuk-checkboxes">
            <div class="govuk-checkboxes__item">
                <input class="govuk-checkboxes__input" id="waste-1" name="waste" type="checkbox" value="carcasses">
                <label class="govuk-label govuk-checkboxes__label" for="waste-1">
                    Flexible start date
                </label>
            </div>
        </div>-->

    </div>

</fieldset>


<script>
     (function ($) {
         $(function () {
             debugger;
             var formGroupErrorClass = "govuk-form-group--error";
             var elementErrorClass = "govuk-input--error";
             var $elementUrl = $("#@nameof(Model.Day)");

             var $monthElementUrl = $("#@nameof(Model.Month)");

             var $yearElementUrl = $("#@nameof(Model.Year)");

             var $validationMessageUrl = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Day)']");

             var $validationMessageUrlForMonth = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Month)']");

             var $validationMessageUrlForYear = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Year)']");

             $validationMessageUrl.css("margin-bottom", "0");
             var $formGroupUrl = $elementUrl.closest('.govuk-form-group');
            // var $formGroupUrlMonth = $monthElementUrl.closest('.govuk-form-group');
            // var $formGroupUrlYear = $yearElementUrl.closest('.govuk-form-group');


             var $form = $elementUrl.closest("form");
             $form.addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
             var validator = $form.validate();

             debugger;
             $elementUrl.on("blur", function () {
                
                 var result = validator.element($elementUrl);
                 var monthValidationResult = validator.element($monthElementUrl);
                 var yearValidationResult = validator.element($yearElementUrl);

                 if (result) {
                     $elementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrl.hide();
                     $validationMessageUrl.css("margin-bottom", "0");
                     if ($monthElementUrl.val() !== "" || $yearElementUrl.val() !== "") {
                         if (monthValidationResult || yearValidationResult) {
                             $formGroupUrl.removeClass(formGroupErrorClass);
                         } else {

                             $formGroupUrl.addClass(formGroupErrorClass);
                         }
                     }

                 } else {
                     $elementUrl.addClass(elementErrorClass);
                     $formGroupUrl.addClass(formGroupErrorClass);
                     $validationMessageUrl.show();
                     $validationMessageUrl.css("margin-bottom", "15px");
                 }

                

                 

                 //if ($validationMessageUrlForMonth.visible()) {
                 //   // $elementUrl.removeClass(elementErrorClass);
                 //    //$formGroupUrl.removeClass(formGroupErrorClass);
                 //    alert("A");
                 //    $monthElementUrl.addClass(elementErrorClass);
                 //    $formGroupUrlMonth.addClass(formGroupErrorClass);
                 //}

                 //var monthValidationResult = validator.element($monthElementUrl);
                 //if (monthValidationResult) {
                 //    $monthElementUrl.removeClass(elementErrorClass);
                 //    $formGroupUrlMonth.removeClass(formGroupErrorClass);
                 //    $validationMessageUrlForMonth.hide();
                 //    $validationMessageUrlForMonth.css("margin-bottom", "0");
                 //} else {
                 //    $monthElementUrl.addClass(elementErrorClass);
                 //    $formGroupUrlMonth.addClass(formGroupErrorClass);
                 //    $validationMessageUrlForMonth.show();
                 //    $validationMessageUrlForMonth.css("margin-bottom", "15px");
                 //}

             });
             debugger;
             $elementUrl.elementValidation(function (element, result) {
                
                 if (!$formGroupUrl.hasClass(formGroupErrorClass)) {
                     $validationMessageUrl.hide();
                 }

                 if (result) {
                     $elementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrl.css("margin-bottom", "0");
                 }

                 //var monthValidationResult = validator.element($monthElementUrl);
                 //var yearValidationResult = validator.element($yearElementUrl);
                 //if (monthValidationResult || yearValidationResult) {
                 //    $formGroupUrl.removeClass(formGroupErrorClass);
                 //} else {

                 //    $formGroupUrl.addClass(formGroupErrorClass);
                 //}

                 //var monthValidationResult = validator.element($monthElementUrl);
                 //var yearValidationResult = validator.element($yearElementUrl);

                 //if (monthValidationResult || yearValidationResult) {
                 //    $formGroupUrl.addClass(formGroupErrorClass);
                 //}

                 //if ($validationMessageUrlForMonth.visible()) {
                 //    //$elementUrl.removeClass(elementErrorClass);
                 //    //$formGroupUrl.removeClass(formGroupErrorClass);
                 //    alert("B");
                 //    $monthElementUrl.addClass(elementErrorClass);
                 //    $formGroupUrlMonth.addClass(formGroupErrorClass);
                 //}
                 //var monthValidationResult = validator.element($monthElementUrl);

                 //if (monthValidationResult) {
                 //    $monthElementUrl.removeClass(elementErrorClass);
                 //    $formGroupUrlMonth.removeClass(formGroupErrorClass);
                 //    $validationMessageUrlForMonth.hide();
                 //    $validationMessageUrlForMonth.css("margin-bottom", "0");
                 //} else {
                 //    $monthElementUrl.addClass(elementErrorClass);
                 //    $formGroupUrlMonth.addClass(formGroupErrorClass);
                 //    $validationMessageUrlForMonth.show();
                 //    $validationMessageUrlForMonth.css("margin-bottom", "15px");
                 //}
             });




             debugger;
             $monthElementUrl.on("blur", function () {
                 
                 var result = validator.element($monthElementUrl);
                 var dayValidationResult = validator.element($elementUrl);
                 var yearValidationResult = validator.element($yearElementUrl);

                 if (result) {
                     $monthElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.hide();
                     $validationMessageUrlForMonth.css("margin-bottom", "0");
                     if ($elementUrl.val() !== "" || $yearElementUrl.val() !== "") {
                         if (dayValidationResult || yearValidationResult) {
                             $formGroupUrl.removeClass(formGroupErrorClass);
                         } else {

                             $formGroupUrl.addClass(formGroupErrorClass);
                         }}

                 } else {
                     $monthElementUrl.addClass(elementErrorClass);
                     $formGroupUrl.addClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.show();
                     $validationMessageUrlForMonth.css("margin-bottom", "15px");
                 }


                 

            


             });
             debugger;
             $monthElementUrl.elementValidation(function (element, result) {
               
                 if (!$formGroupUrl.hasClass(formGroupErrorClass)) {
                     $validationMessageUrlForMonth.hide();
                 }

                 if (result) {
                     $monthElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.css("margin-bottom", "0");
                 }

                 //var dayValidationResult = validator.element($elementUrl);
                 //var yearValidationResult = validator.element($yearElementUrl);


                 //if (dayValidationResult || yearValidationResult) {
                 //    $formGroupUrl.addClass(formGroupErrorClass);
                 //}
                 //var dayValidationResult = validator.element($elementUrl);

                 //if (dayValidationResult) {
                 //    $elementUrl.removeClass(elementErrorClass);
                 //    $formGroupUrl.removeClass(formGroupErrorClass);
                 //    $validationMessageUrl.hide();
                 //    $validationMessageUrl.css("margin-bottom", "0");
                 //} else {
                 //    $elementUrl.addClass(elementErrorClass);
                 //    $formGroupUrl.addClass(formGroupErrorClass);
                 //    $validationMessageUrl.show();
                 //    $validationMessageUrl.css("margin-bottom", "15px");
                 //}

             });

         });
     })(jQuery);
</script>

