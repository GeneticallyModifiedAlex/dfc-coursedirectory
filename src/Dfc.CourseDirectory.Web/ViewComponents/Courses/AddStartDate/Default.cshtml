@using Dfc.CourseDirectory.Common.Settings
@using Dfc.CourseDirectory.Models.Models.Courses
@using Microsoft.Extensions.Options
@model Dfc.CourseDirectory.Web.ViewComponents.Courses.AddStartDate.AddStartDateModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<fieldset class="govuk-fieldset" aria-describedby="changed-name-hint">

    <div class="govuk-form-group" id="date">
        <label class="govuk-label" for="sub" style="margin-bottom: 15px">
            @Model.LabelText

        </label>
        <span id="more-detail-hint" class="govuk-hint">@Model.SpecifiedDateHintText </span>


        <div class="govuk-radios__item">
            @Html.RadioButtonFor(m => m.StartDateType, StartDateType.SpecifiedStartDate, new { @class = "govuk-radios__input specified", id = @StartDateType.SpecifiedStartDate })
            <label class="govuk-label govuk-radios__label" for="@StartDateType.SpecifiedStartDate"></label>
        </div>

        @Html.HiddenFor(x => x.StartDate)

        <div class="govuk-form-group" id="startDateFormGroup">
            <span asp-validation-for="@Model.Day" class="govuk-error-message"></span>
            <span asp-validation-for="@Model.Month" class="govuk-error-message"></span>
            <span asp-validation-for="@Model.Year" class="govuk-error-message"></span>
            <span class="govuk-error-message field-validation-error" id="invalidDate" style="display: none">
                <span id="invalidDateMessage" class=""></span>
            </span>
            <div class="dateFields">
                <label class="govuk-label" asp-for="@Model.Day" aria-describedby="@Model.DayAriaDescribedBy" style="display: inline-block; width: 60px;">
                    @Model.DayLabelText
                </label>
                <label class="govuk-label" asp-for="@Model.Month" aria-describedby="@Model.MonthAriaDescribedBy" style="display: inline-block; width: 60px;">
                    @Model.MonthLabelText
                </label>
                <label class="govuk-label" asp-for="@Model.Year" aria-describedby="@Model.YearAriaDescribedBy" style="display: inline-block; width: 120px;">
                    @Model.YearLabelText
                </label>
            </div>

            <input class="govuk-input" asp-for="@Model.Day" type="text" style="width: 60px;">
            <input class="govuk-input" asp-for="@Model.Month" type="text" style="width: 60px;">
            <input class="govuk-input" asp-for="@Model.Year" type="text" style="width: 120px;">
        </div>

        <span id="more-detail-hint" class="govuk-hint" style="margin-top: 20px">@Model.FlexibleDateHintText </span>

        <div class="govuk-radios__item">
            @Html.RadioButtonFor(m => m.StartDateType, StartDateType.FlexibleStartDate, new { @class = "govuk-radios__input flexible", id = @StartDateType.FlexibleStartDate })
            <label class="govuk-label govuk-radios__label" for="@StartDateType.FlexibleStartDate">Select a flexible start date</label>
        </div>

    </div>

</fieldset>


<script>
     (function ($) {
         $(function () {
             var formGroupErrorClass = "govuk-form-group--error";
             var elementErrorClass = "govuk-input--error";
             var $elementUrl = $("#@nameof(Model.Day)");

             var $monthElementUrl = $("#@nameof(Model.Month)");

             var $yearElementUrl = $("#@nameof(Model.Year)");

             var $validationMessageUrl = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Day)']");

             var $validationMessageUrlForMonth = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Month)']");

             var $validationMessageUrlForYear = $elementUrl.prev("[data-valmsg-for='@nameof(Model.Year)']");

             $validationMessageUrl.css("margin-bottom", "0");
             var $formGroupUrl = $elementUrl.closest('.govuk-form-group');


             var $form = $elementUrl.closest("form");
             $form.addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
             var validator = $form.validate();

             $elementUrl.on("blur", function () {

                 var result = validator.element($elementUrl);
                 var monthValidationResult = validator.element($monthElementUrl);
                 var yearValidationResult = validator.element($yearElementUrl);

                 if (result) {
                     $elementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrl.hide();
                     $validationMessageUrl.css("margin-bottom", "0");
                     if ($monthElementUrl.val() !== "" || $yearElementUrl.val() !== "") {
                         if (monthValidationResult || yearValidationResult) {
                             $formGroupUrl.removeClass(formGroupErrorClass);
                         } else {

                             $formGroupUrl.addClass(formGroupErrorClass);
                         }
                     }

                 } else {
                     $elementUrl.addClass(elementErrorClass);
                     $formGroupUrl.addClass(formGroupErrorClass);
                     $validationMessageUrl.show();
                     $validationMessageUrl.css("margin-bottom", "15px");
                 }
             });
             $elementUrl.elementValidation(function (element, result) {

                 if (!$formGroupUrl.hasClass(formGroupErrorClass)) {
                     $validationMessageUrl.hide();
                 }

                 if (result) {
                     $elementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrl.css("margin-bottom", "0");
                 }
             });




             $monthElementUrl.on("blur", function () {

                 var result = validator.element($monthElementUrl);
                 var dayValidationResult = validator.element($elementUrl);
                 var yearValidationResult = validator.element($yearElementUrl);

                 if (result) {
                     $monthElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.hide();
                     $validationMessageUrlForMonth.css("margin-bottom", "0");
                     if ($elementUrl.val() !== "" || $yearElementUrl.val() !== "") {
                         if (dayValidationResult || yearValidationResult) {
                             $formGroupUrl.removeClass(formGroupErrorClass);
                         } else {

                             $formGroupUrl.addClass(formGroupErrorClass);
                         }}

                 } else {
                     $monthElementUrl.addClass(elementErrorClass);
                     $formGroupUrl.addClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.show();
                     $validationMessageUrlForMonth.css("margin-bottom", "15px");
                 }







             });
             $monthElementUrl.elementValidation(function (element, result) {

                 if (!$formGroupUrl.hasClass(formGroupErrorClass)) {
                     $validationMessageUrlForMonth.hide();
                 }

                 if (result) {
                     $monthElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForMonth.css("margin-bottom", "0");
                 }



             });








             $yearElementUrl.on("blur", function () {


                 var result = validator.element($yearElementUrl);
                 var dayValidationResult = validator.element($elementUrl);
                 var monthValidationResult = validator.element($monthElementUrl);

                 if (result) {
                     $yearElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForYear.hide();
                     $validationMessageUrlForYear.css("margin-bottom", "0");
                     if ($elementUrl.val() !== "" || $monthElementUrl.val() !== "") {
                         if (dayValidationResult || monthValidationResult) {
                             $formGroupUrl.removeClass(formGroupErrorClass);
                         } else {

                             $formGroupUrl.addClass(formGroupErrorClass);
                         }
                     }

                     if ($elementUrl.val() !== "" && $monthElementUrl.val() !== "" && $yearElementUrl.val() !== "") {
                         var $invalidDate = $("#invalidDate");
                         var $invalidDateMessage = $("#invalidDateMessage");
                         var enteredDate = $elementUrl.val() + "/" + $monthElementUrl.val() + "/" + $yearElementUrl.val();

                         var d = new Date();
                         var currentDate = d.getFullYear() + "/" + (d.getMonth() + 1) + "/" + d.getDate();

                         var futureDate = (d.getFullYear() +2) + "/" + (d.getMonth() + 1) + "/" + d.getDate();

                         if (Date.parse(enteredDate) - Date.parse(currentDate) < 0) {
                             $invalidDateMessage.text("Start Date cannot be earlier than today’s date");
                             $yearElementUrl.addClass(elementErrorClass);
                             $formGroupUrl.addClass(formGroupErrorClass);
                             $invalidDate.show();
                             $invalidDate.css("margin-bottom", "15px");
                         } else {
                             if (Date.parse(enteredDate) > Date.parse(futureDate)) {
                                 $invalidDateMessage.text("Start Date cannot be later than 2 years from today’s date");
                                 $yearElementUrl.addClass(elementErrorClass);
                                 $formGroupUrl.addClass(formGroupErrorClass);
                                 $invalidDate.show();
                                 $invalidDate.css("margin-bottom", "15px");

                             } else {
                                 $invalidDate.hide();
                                 $invalidDate.css("margin-bottom", "0");

                                 var $starDateElement = $("#@nameof(Model.StartDate)");
                                 $starDateElement.val(enteredDate);
                             }
                         }
                     }



                 } else {
                     $yearElementUrl.addClass(elementErrorClass);
                     $formGroupUrl.addClass(formGroupErrorClass);
                     $validationMessageUrlForYear.show();
                     $validationMessageUrlForYear.css("margin-bottom", "15px");
                 }







             });
             $yearElementUrl.elementValidation(function (element, result) {




                 if (!$formGroupUrl.hasClass(formGroupErrorClass)) {
                     $validationMessageUrlForYear.hide();
                 }

                 if (result) {
                     $yearElementUrl.removeClass(elementErrorClass);
                     $formGroupUrl.removeClass(formGroupErrorClass);
                     $validationMessageUrlForYear.css("margin-bottom", "0");
                     }
                     



             });

         });
     })(jQuery);
</script>

